/* 2150265 王加炜 济勤09班 */
using namespace std;
#include <iostream>
#include <cstdio>
#include <conio.h>
#include <time.h>
#include <windows.h>


const int MAX_X = 69;	//定义*组成的边框的宽度
const int MAX_Y = 17;	//定义*组成的边框的高度

/***************************************************************************
  函数名称：
  功    能：完成与system("cls")一样的功能，但效率高
  输入参数：
  返 回 值：
  说    明：清除整个屏幕缓冲区，不仅仅是可见窗口区域(使用当前颜色)
***************************************************************************/
void cls(const HANDLE hout)
{
	COORD coord = { 0, 0 };
	CONSOLE_SCREEN_BUFFER_INFO binfo; /* to get buffer info */
	DWORD num;

	/* 取当前缓冲区信息 */
	GetConsoleScreenBufferInfo(hout, &binfo);
	/* 填充字符 */
	FillConsoleOutputCharacter(hout, (TCHAR)' ', binfo.dwSize.X * binfo.dwSize.Y, coord, &num);
	/* 填充属性 */
	FillConsoleOutputAttribute(hout, binfo.wAttributes, binfo.dwSize.X * binfo.dwSize.Y, coord, &num);

	/* 光标回到(0,0) */
	SetConsoleCursorPosition(hout, coord);
	return;
}

/***************************************************************************
  函数名称：gotoxy
  功    能：将光标移动到指定位置
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void gotoxy(const HANDLE hout, const int X, const int Y)
{
	COORD coord;
	coord.X = X;
	coord.Y = Y;
	SetConsoleCursorPosition(hout, coord);
}

/***************************************************************************
  函数名称：showch
  功    能：在指定位置处打印一个指定的字符
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
			char ch     ：要打印的字符	
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void showch(const HANDLE hout, const int X, const int Y, const char ch)
{
	gotoxy(hout, X, Y);
	putchar(ch);
}

/***************************************************************************
  函数名称：init_border
  功    能：显示初始的边框及随机字符
  输入参数：HANDLE hout：输出设备句柄
  返 回 值：无
  说    明：此函数不准修改
***************************************************************************/
void init_border(const HANDLE hout)
{
	gotoxy(hout, 0, 0);	//光标移回左上角(0,0)
	cout << "***********************************************************************" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "***********************************************************************" << endl;

	/* 随机显示20个大写字母，字母的值、XY坐标都随机显示
	   rand()函数的功能：随机生成一个在 0-32767 之间的整数
	   思考：在什么情况下，下面这个循环执行生成后，你看到的实际字母个数不足20个？ */
	int i;
	for (i = 0; i < 20; i++)
		showch(hout, rand() % MAX_X + 1, rand() % MAX_Y + 1, 'A' + rand() % 26);

	return;
}

/* -- 按需增加的若干函数可以放在此处 --*/

void menu()
{

	cout << "1.用I、J、K、L键控制上下左右(大小写均可，边界停止)" << endl;
	cout << "2.用I、J、K、L键控制上下左右(大小写均可，边界回绕)" << endl;
	cout << "3.用箭头键控制上下左右，边界停止" << endl;
	cout << "4.用箭头键控制上下左右，边界回绕" << endl;
	cout << "5.用I、J、K、L键控制上下左右(边界停止，按左箭头不准向下移动)" << endl;
	cout << "6.用I、J、K、L键控制上下左右(边界回绕，按左箭头不准向下移动)" << endl;
	cout << "0.退出" << endl;
	cout << "[请选择0-6] ";

}


void move_by_ijkl(char t)
{
	int x = 35, y = 9;
	const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);
	gotoxy(hout, 35, 9);


	while (true)
	{


		int a;
		a = _getch();
		if (t == '1')
		{
			switch (a)
			{
				case 'i':
					y > 1 ? y-- : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'k':
					y < 17 ? y++ : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'j':
					x > 1 ? x-- : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'l':
					x < 69 ? x++ : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'I':
					y > 1 ? y-- : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'K':
					y < 17 ? y++ : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'J':
					x > 1 ? x-- : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'L':
					x < 69 ? x++ : x = 69;
					gotoxy(hout, x, y);
					break;
				case 32:
					showch(hout, x, y, 32);
					gotoxy(hout, x, y);
					break;
			}
			if ((a == 'q') || (a == 'Q'))
				break;
		}
		if (t == '2')
		{
			switch (a)
			{
				case 'i':
					y > 1 ? y-- : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'k':
					y < 17 ? y++ : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'j':
					x > 1 ? x-- : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'l':
					x < 69 ? x++ : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'I':
					y > 1 ? y-- : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'K':
					y < 17 ? y++ : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'J':
					x > 1 ? x-- : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'L':
					x < 69 ? x++ : x = 1;
					gotoxy(hout, x, y);
					break;
				case 32:
					showch(hout, x, y, 32);
					break;


			}
			if ((a == 'q') || (a == 'Q'))
				break;
		}

		
		if (t == '5')
		{
		
			if (a == 224)
			{
				a = _getch();
				if (a == 75)
				{
					gotoxy(hout, x, y);
					continue;
				}
			}
			switch (a)
			{

				case 'i':
					y > 1 ? y-- : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'k':
					y < 17 ? y++ : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'j':
					x > 1 ? x-- : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'l':
					x < 69 ? x++ : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'I':
					y > 1 ? y-- : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'K':
					y < 17 ? y++ : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'J':
					x > 1 ? x-- : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'L':
					x < 69 ? x++ : x = 69;
					gotoxy(hout, x, y);
					break;
				case 32:
					showch(hout, x, y, 32);
					gotoxy(hout, x, y);
					break;
			}
			if ((a == 'q') || (a == 'Q'))
				break;
			
		
		}
		if (t == '6')
		{
			if (a == 224)
			{
				a = _getch();
				if (a == 75)
				{
					gotoxy(hout, x, y);
					continue;
				}
			}
			
		
			switch (a)
			{
				case 'i':
					y > 1 ? y-- : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'k':
					y < 17 ? y++ : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'j':
					x > 1 ? x-- : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'l':
					x < 69 ? x++ : x = 1;
					gotoxy(hout, x, y);
					break;
				case 'I':
					y > 1 ? y-- : y = 17;
					gotoxy(hout, x, y);
					break;
				case 'K':
					y < 17 ? y++ : y = 1;
					gotoxy(hout, x, y);
					break;
				case 'J':
					x > 1 ? x-- : x = 69;
					gotoxy(hout, x, y);
					break;
				case 'L':
					x < 69 ? x++ : x = 1;
					gotoxy(hout, x, y);
					break;
				case 32:
					showch(hout, x, y, 32);
					break;

			}
			if ((a == 'q') || (a == 'Q'))
				break;
		}
		

		
	}




}



void move_by_arrow(char g)
{
	int x = 34, y = 8;
	const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);
	gotoxy(hout, 34, 8);


	while (true)
	{


		
		if (g == '3')
		{
			int c;
			c = _getch();
			if (c == 72 || c == 75 || c == 77 || c == 80)
				continue;
			if (c == 'q' || c == 'Q')
				break;
			if(c==32)
				showch(hout, x, y, 32);
			int d;
			d = _getch();
			switch (d)
			{
				
				case 72:
					
					y > 1 ? y-- : y = 1;
					gotoxy(hout, x, y);
					break;
				case 80:
					
					y < 17 ? y++ : y = 17;
					gotoxy(hout, x, y);
					break;
				case 75:
					x > 1 ? x-- : x = 1;
					gotoxy(hout, x, y);
					break;
				case 77:
					

					x < 69 ? x++ : x = 69;
					gotoxy(hout, x, y);
					break;

				case 32:
					showch(hout, x, y, 32);
					gotoxy(hout, x, y);
					break;
			}
			
		}
		if (g == '4')
		{
			int p;
			p = _getch();
			if (p== 72 || p == 75 || p == 77 || p == 80)
				continue;
			if (p == 'q' || p== 'Q')
				break;
			if (p== 32)
				showch(hout, x, y, 32);
			int z;
			z = _getch();
			switch (z)
			{

				case 72:
					y > 1 ? y-- : y = 17;
					gotoxy(hout, x, y);
					break;
				case 80:
					y < 17 ? y++ : y = 1;
					gotoxy(hout, x, y);
					break;
				case 75:
					x > 1 ? x-- : x = 69;
					gotoxy(hout, x, y);
					break;
				case 77:
					x < 69 ? x++ : x = 1;
					gotoxy(hout, x, y);
					break;
				case 32:
					showch(hout, x, y, 32);
					break;
			}

		}
	}
	
	
	
	
}





	/***************************************************************************
	  函数名称：
	  功    能：
	  输入参数：
	  返 回 值：
	  说    明：main函数仅用于初始演示，可以按题目要求全部推翻重写
	***************************************************************************/
	int main()
	{
		while (1)
		{
			const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE); //取标准输出设备对应的句柄
			cls(hout);
			menu();
			char num;
			num = _getch();

			

			/* 生成伪随机数的种子，只需在程序开始时执行一次即可 */
			srand((unsigned int)(time(0)));

			/* 此句的作用是调用系统的cls命令清屏 */
			cls(hout);

			/* 显示初始的边框及其中的随机字符 */
			init_border(hout);

			switch (num)
			{
				case '1':
					move_by_ijkl(num);
					break;
				case '2':
					move_by_ijkl(num);
					break;
				case '3':
					move_by_arrow(num);
					break;
				case '4':
					move_by_arrow(num);
					break;
				case '5':
					move_by_ijkl(num);
					break;
				case '6':
					move_by_ijkl(num);
					break;
				
			}
			if (num == '0')
			{
				cls(hout);
				break;
			}
			gotoxy(hout, 0, 23);
			cout << "游戏结束，按回车键返回菜单.";
			while (_getch() != 13)
			{
				
				showch(hout,27,23,32);
			}
			cout << endl;
		}
		//暂停(此处作业要求是只能按回车退出，目前的getchar示例，是允许按任意键+回车退出，且任意键会出现在屏幕上)
		//getchar();
		return 0;
	}
	//关于为何一开始在屏幕上可能不显示20个字符的问题，我认为可能是多次正好在同一个位置处生成字符，因此会发生字符覆盖的现象，尽管这种情况的概率非常小。